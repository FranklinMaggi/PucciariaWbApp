// catalogRenderer.js
// Modulo di rendering prodotti Pucciaria

export function renderCardsProducts(products) {
  return products.map(prod => {
    const id = prod.id || prod.nome;
    const img = `./img/${id}.jpeg`;
    const base = (prod.ingredienti_base || []).map(x => mappa_ingredienti[x.id]).filter(Boolean);
    const modificabili = base.filter(i => i.modificabile !== false);
    const ingredients_html = renderIngredientiBase(modificabili, []);

    const infoMsg = (prod.cat_key === 'prodotti_senza_puccia' || prod.cat_key === 'prodotti_antipasti')
      ? `<p class="info-ciccio-msg" style="font-size: 0.92em; color: #a94442; margin-top: 0.8em;">
           Non serviamo pane con i nostri <b>senza puccia</b> e <b>antipasti</b>.<br>
           Se desideri del pane, puoi aggiungere al carrello un <b>Ciccio</b> o una <b>Puccia Vuota</b> qui sotto.
         </p>` : '';

    return `
      <div class="card card-side" data-id="${id}" data-cat="${prod.cat_key}" data-subcat="${prod.sub_key}">
        <div class="card-content">
          <h2>${prod.nome}</h2>
          <p>${prod.descrizione || ''}</p>
          <p><b><span class="card-prezzo" data-price-container>${prod.prezzo.toFixed(2)}</span> €</b></p>
          <form class="quick-form" autocomplete="off">
            <div class="quick-ingredients">${ingredients_html}</div>
            <button type="submit" class="carrello-btn">Aggiungi Rapido</button>
            <button type="button" class="customize-btn">Personalizza Extra</button>
          </form>
          ${infoMsg}
        </div>
        <div class="card-img-wrap">
          <img src="${img}" alt="${prod.nome}" class="card-img" onerror="this.onerror=null;this.src='./img/placeholder.png';">
        </div>
      </div>`;
  }).join('');
}

export function renderCardsMiniProducts(products) {
  return products.map(prod => renderMiniCardCiccioPuccia(prod)).join('');
}

export function renderCardsDrinks(products) {
  return products.map(prod => {
    const id = prod.id || prod.nome;
    const img = `./img/${id}.jpeg`;
    return `
      <div class="card card-side" data-id="${id}" data-cat="${prod.cat_key}" data-subcat="${prod.sub_key}">
        <div class="card-content">
          <h2>${prod.nome}</h2>
          <p>${prod.descrizione || ''}</p>
          <p><b>${prod.prezzo.toFixed(2)} €</b></p>
          <form class="bevanda-form" autocomplete="off">
            <div class="bevanda-qty-stepper">
              <button type="button" class="qty-minus">−</button>
              <input type="number" name="qty" min="1" max="99" value="1" class="bevanda-qty-input">
              <button type="button" class="qty-plus">+</button>
            </div>
            <button type="submit" class="carrello-btn">Aggiungi al carrello</button>
          </form>
        </div>
        <div class="card-img-wrap">
          <img src="${img}" alt="${prod.nome}" class="card-img" onerror="this.onerror=null;this.src='./img/placeholder.png';">
        </div>
      </div>
    `;
  }).join('');
}

export function renderProducts(products, headerHtml = '') {
  if (!catalogo_div) return;
  catalogo_div.innerHTML = '';

  const grouped = {};
  products.forEach(prod => {
    const label = prod.sub_label || prod.sub_key || 'Altro';
    if (!grouped[label]) grouped[label] = [];
    grouped[label].push(prod);
  });

  Object.entries(grouped).forEach(([label, group]) => {
    catalogo_div.innerHTML += `<h3 class="cat-title">${label}</h3><div class="cards-column">`;

    const drinks = group.filter(p => p.cat_key === 'prodotti_bevande');
    const mini   = group.filter(p => p.isExtraBread);
    const std    = group.filter(p => !p.isExtraBread && p.cat_key !== 'prodotti_bevande');

    catalogo_div.innerHTML += renderCardsDrinks(drinks);
    catalogo_div.innerHTML += renderCardsProducts(std);
    catalogo_div.innerHTML += renderCardsMiniProducts(mini);

    catalogo_div.innerHTML += '</div>';
  });
}

export function render_catalogo() {
  const filtered = allProducts.filter(p => {
    if (categoria_attiva !== 'tutti' && p.cat_key !== categoria_attiva) return false;
    if (sottocategoria_attiva !== 'tutte' && p.sub_key !== sottocategoria_attiva) return false;
    return true;
  });
  renderProducts(filtered);
}

export function renderSearchProducts(query) {
  const q = query.trim().toLowerCase();
  if (!q) return render_catalogo();

  const filtered = allProducts.filter(p => {
    const nameMatch = p.nome.toLowerCase().includes(q) || (p.descrizione || '').toLowerCase().includes(q);
    const ingrMatch = (p.ingredienti_base || []).some(x => mappa_ingredienti[x.id]?.nome.toLowerCase().includes(q));
    return nameMatch || ingrMatch;
  });

  renderProducts(filtered, `<h3 class="cat-title">Risultati per: "<span style="color:#fab100">${q}</span>"</h3>`);
}
